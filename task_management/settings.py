"""
Django settings for task_management project.

This file contains configurations for the Django project, including installed applications,
middleware, database setup, authentication, and static files management.
Generated by 'django-admin startproject' using Django 5.1.3.
"""

from pathlib import Path
import os

# Define the base directory for the project
BASE_DIR = Path(__file__).resolve().parent.parent

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-0e0&jbat3o5yr0%cjoya^1mghs=r5h5=4y2#+elo)$do(@t1vi'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True  # Debug mode for development; should be False in production

ALLOWED_HOSTS = []  # Hosts allowed to access the application


# Application definition
INSTALLED_APPS = [
    'django.contrib.admin',  # Admin site
    'django.contrib.auth',  # Authentication system
    'django.contrib.contenttypes',  # Content types framework
    'django.contrib.sessions',  # Session framework
    'django.contrib.messages',  # Messaging framework
    'django.contrib.staticfiles',  # Static files handling
    'accounts',  # Custom accounts app
    'tasks',  # Task management app
    'widget_tweaks',  # Widget customization library
]

# Middleware configuration
MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',  # Security enhancements
    'django.contrib.sessions.middleware.SessionMiddleware',  # Manage user sessions
    'django.middleware.common.CommonMiddleware',  # Basic middleware for handling requests
    'django.middleware.csrf.CsrfViewMiddleware',  # CSRF protection
    'django.contrib.auth.middleware.AuthenticationMiddleware',  # Authentication handling
    'django.contrib.messages.middleware.MessageMiddleware',  # Message framework
    'django.middleware.clickjacking.XFrameOptionsMiddleware',  # Protection against clickjacking
]

# Root URL configuration
ROOT_URLCONF = 'task_management.urls'

# Template engine configuration
TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',  # Use Django's template engine
        'DIRS': [BASE_DIR / "task_management/templates"],  # Custom templates directory
        'APP_DIRS': True,  # Enable template auto-discovery
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',  # Debug information
                'django.template.context_processors.request',  # Add request object to templates
                'django.contrib.auth.context_processors.auth',  # User authentication context
                'django.contrib.messages.context_processors.messages',  # Message framework context
            ],
        },
    },
]

# Static files configuration
STATIC_URL = "/static/"  # URL for serving static files
STATICFILES_DIRS = [BASE_DIR / "task_management/static"]  # Directory for custom static files

# WSGI application entry point
WSGI_APPLICATION = 'task_management.wsgi.application'


# Database configuration
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',  # Use PostgreSQL as the database
        'NAME': 'task_management',  # Database name
        'USER': 'taskuser',  # Database user
        'PASSWORD': 'task-password',  # User password
        'HOST': 'localhost',  # Host where the database is running
        'PORT': '5432',  # Default PostgreSQL port
    }
}


# Password validation settings
AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',  # Prevents passwords similar to user attributes
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',  # Enforces a minimum password length
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',  # Prevents common passwords
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',  # Disallows fully numeric passwords
    },
]


# Internationalization settings
LANGUAGE_CODE = 'en-us'  # Default language
TIME_ZONE = 'UTC'  # Default timezone
USE_I18N = True  # Enable internationalization
USE_TZ = True  # Use timezone-aware datetime objects


# Default primary key field type
DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Authentication settings
LOGIN_REDIRECT_URL = '/'  # Redirect URL after login
LOGOUT_REDIRECT_URL = '/'  # Redirect URL after logout
AUTH_USER_MODEL = 'accounts.CustomUser'  # Use custom user model

# Media files configuration
MEDIA_URL = '/media/'  # URL for media files
MEDIA_ROOT = BASE_DIR / 'media'  # Directory for storing media files

# Logging configuration
LOGGING = {
    'version': 1,  # Logging configuration version
    'disable_existing_loggers': False,  # Preserve existing loggers
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',  # Log to the console
        },
    },
    'loggers': {
        'django': {
            'handlers': ['console'],  # Use the console handler for Django logs
            'level': 'DEBUG',  # Set logging level to DEBUG
        },
    },
}

# Email backend configuration for password reset functionality
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'  # SMTP backend for email
EMAIL_HOST = 'smtp.gmail.com'  # Gmail SMTP server
EMAIL_PORT = 587  # SMTP port
EMAIL_USE_TLS = True  # Use TLS for email security
EMAIL_HOST_USER = 'leodublin33@gmail.com'  # Email address
EMAIL_HOST_PASSWORD = 'qdki mvvl nrqh lecm'  # Email application password
DEFAULT_FROM_EMAIL = 'Task Management App <leodublin33@gmail.com>'  # Default "from" email address
SERVER_EMAIL = 'leodublin33@gmail.com'  # Server email address
